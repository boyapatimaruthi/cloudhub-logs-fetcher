<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:context="http://www.springframework.org/schema/context" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
    <context:property-placeholder location="${env}.properties"/>
    <http:request-config name="HTTP_Request_Configuration_AnyPoint_Platfrom" protocol="HTTPS" host="${anypoint.host}" port="${anypoint.port}" doc:name="HTTP Request Configuration" connectionIdleTimeout="50000" enableCookies="true"/>
    <objectstore:config name="ObjectStore__Connector" partition="mypartition" entryTtl="0" expirationInterval="0" maxEntries="0" persistent="true" doc:name="ObjectStore: Connector"/>
    <file:connector name="File" autoDelete="false" streaming="true" validateConnections="true" doc:name="File"/>
    <flow name="cloudhub-logs-fetcherFlow" doc:description="This Flow Will Start with Poll Scope Which is Sceduled for Every 59 Minutes. Because CloudHub's OAuth Access Token Expires Every 60 Minutes. This Will Call the &quot;fetch-Anypoint-OAuth-Token-Flow&quot; to Create Anypoint OAuth_Token and Store that Token in Object Store ">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="59" timeUnit="MINUTES" />
            <logger message="Initiated  Fetching or Updating OAuth Access_Token" level="INFO" doc:name="Logger"/>
        </poll>
        <flow-ref name="fetch-Anypoint-OAuth-Token-Flow" doc:name="fetch-Anypoint-OAuth-Token-Flow"/>
    </flow>
    <flow name="fetch-Anypoint-OAuth-Token-Flow" doc:description="This Flow is Responsible for the Getting Aypoint OAuth Token and Storing in the Object Store.">
        <logger message="Creating New Anypoint Access Token" level="INFO" doc:name="Logger" doc:description="Logs &quot;Creating New Anypoint Access Token&quot;- &quot;INFO&quot; Message When This Flow started Executing. This Will run Every 59 minutes."/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	username: '${anypoint.username}',
	password: '${anypoint.password}'
}]]></dw:set-payload>
        </dw:transform-message>
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set Content Type Header" mimeType="text/plain" doc:description="Setting Header &quot;Content-Type: application/json&quot; for HTTP POST Anypoint Login Request "/>
        <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/accounts/login" method="POST" doc:name="HTTP GET OAuth Token" doc:description="Hitting Anypoint API to Get the OAuth Token by Doing a POST request with username, password as JSON. The Success Response Will  be with a 200 Status with a JSON response BODY that contains OAuth Security Token and few more values."/>
        <json:json-to-object-transformer returnClass="java.lang.Object" mimeType="application/java" doc:name="JSON to Object" doc:description="Converting the JSON Response from the HTTP request into a JAVA Object for Further Processing."/>
        <logger message="New Access token JSON Info:::  #[message.payloadAs(java.lang.String)]  + #[payload.access_token]" level="INFO" doc:name="Logger" doc:description="Logging &quot;INFO&quot; message with the HTTP Resonse BODY and the Access Token in the Response BODY. "/>
        <objectstore:store config-ref="ObjectStore__Connector" key="anypoint_access_token" value-ref="#[payload.access_token]" overwrite="true" doc:name="Store Access Token In Object Store" doc:description="Storing the Access token in the Object Store which will save this information in an isolated scope and Stored object can be retrieved and modified anytime(at any point of Runtime). Values Stored in Object Store WILL NOT Expire for Each Session or Each Request. So we can uses ame Access Token to make Multiple Requests."/>
        <flow-ref name="fetch-organization-flow" doc:name="fetch-organization-flow" doc:description="This Flow Reference the Will the &quot;fetch-organization-flow&quot; Flow after Storing the Access_Token in Object Store."/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Error Getting Access Token ::: Cause : #[message.payloadAs(java.lang.String)]" level="ERROR" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <flow name="fetch-organization-flow" doc:description="This Flow is Responsible for Getting the Orgnization Name and Organization Id of  the User. Anypoint Access_Token must be passed as a header to Retrieve the Orgnization Name and Organization Id from the Anypoint CloudHub API." initialState="started">
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store" doc:description="Retrieveing the Access Token Stored in Object Store to Make a HTTP GET Request to Anypoint CloudHub API."/>
        <logger message="Retrieved AccessToken from Object Store:: #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger" doc:description="Logging &quot;INFO&quot; message with Access_Token retrieved from Object Store."/>
        <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header" doc:description="Creating An OutBound Property with Key &quot;Authorization&quot; and Value as &quot;Bearer oauth_access_token&quot;.
Ex: Authorization: Bearer sdgjeroigjoijr-dadrh023-67y
This will go as (mandatory) header in the HTTP Request to get the  Response.  "/>
        <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/accounts/api/me" method="GET" doc:name="HTTP Request to GET Account Info" doc:description="Making HTTP GET Request to get the Profile Information of the USER, which Contains Organzation Name and Organization ID along with User Profile details. This  Organzation Name and Organization ID are required to make Different Types of API calls to Anypoint Platform."/>
        <json:json-to-object-transformer returnClass="java.lang.Object" mimeType="application/java" doc:name="JSON to Object" doc:description="Converting the JSON Response from the HTTP request into a JAVA Object for Further Processing."/>
        <set-variable variableName="anypoint_user_details" value="#[payload]" doc:name="Back Up User Info Payload Flow Var" doc:description="This FlowVar &quot;anypoint_user_details&quot; is used as the Backup of Payload (HTTP Response from Anypoint API which Contains USER Details). It will be lost After Calling Next Object Store."/>
        <logger level="INFO" doc:name="Logger" message="#[message.payloadAs(java.lang.String)]" doc:description="Logging &quot;INFO&quot; message with the HTTP Resonse BODY (User Info JSON). "/>
        <objectstore:store config-ref="ObjectStore__Connector" key="anypoint_organization_id" value-ref="#[flowVars.anypoint_user_details.user.organization.id]" overwrite="true" doc:name="Store Organization_Id In Object Store" doc:description="Storing Organization_ID in Object Store for Later Usage."/>
        <objectstore:store config-ref="ObjectStore__Connector" key="anypoint_organization_name" value-ref="#[flowVars.anypoint_user_details.user.organization.name]" overwrite="true" doc:name="Store Organization_name In Object Store" doc:description="Storing Organization_Name in Object Store for Later Usage. (This Will Be the End of Single POLL Task Scheduled and next Poll to Refresh Object Store Values Will run After 59 Minutes )"/>
        <!-- <flow-ref name="fetch-all-environments" doc:name="fetch-all-environments"/> -->
    </flow>
    <flow name="fetch-logs-scheduler-flow">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="100" startDelay="10" timeUnit="SECONDS"/>
            <logger message="Initiated Fetching Logs" level="INFO" doc:name="Logger" doc:description="This logger Will print &quot;Initiated Fetching Logs&quot; Message at the time of execution of &quot;fetch-all-environments&quot; (this) flow."/>
        </poll>
        <flow-ref name="fetch-all-environments-flow" doc:name="fetch-all-environments-flow"/>
    </flow>
    
    
        <flow name="fetch-all-environments-flow" doc:description="This flow is responsible for fetching all the environments according to a organization id of a User.Anypoint Access_Token and organization id must be passed as a header to Retrieve all environments." initialState="started">
        <logger message="Getting All Enviroments" level="INFO" doc:name="Logger" doc:description="This logger is used to show &quot;Getting All Enviroments&quot; Message when &quot;fetch-all-environments&quot; flow will be executed."/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store" doc:description="Retrieveing the Access Token Stored in Object Store to Make a HTTP GET Request to Anypoint CloudHub API."/>
        <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header" doc:description="Creating An OutBound Property with Key &quot;Authorization&quot; and Value as &quot;Bearer oauth_access_token&quot;. Ex: Authorization: Bearer sdgjeroigjoijr-bfadrh023-85y This will go as (mandatory) header in the HTTP Request to get the  Response.  "/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_organization_id" doc:name="Retrieve Organization From Object Store" doc:description="Retrieveing the Organization ID Stored in Object Store to Make a HTTP GET Request to Anypoint CloudHub API."/>
        <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/accounts/api/organizations/#[message.payloadAs(java.lang.String)]/environments" method="GET" doc:name="HTTP" doc:description="Hitting Anypoint API to Get the Environments according to Organization Id by Doing a GETrequest with Authorization Token and Organization Id as header. The Success Response Will  be with a 200 Status with a JSON response BODY that contains list of environment details."/>
        <json:json-to-object-transformer returnClass="java.lang.Object" mimeType="application/java" doc:name="JSON to Object" doc:description="Converting the JSON Response from the HTTP request into a JAVA Object for Further Processing."/>
        <objectstore:store config-ref="ObjectStore__Connector" key="all_environments_object" value-ref="#[payload]" overwrite="true" doc:name="Store All Environment Object In Object Store" doc:description="Storing Environment Object with Environment Id in Object Store for Later Usage."/>
        <flow-ref name="fetch-all-applications-flow" doc:name="fetch-all-applications" doc:description="It is calling &quot;fetch-all-applications&quot; flow to get all the Applications according to a Environment Id after storing Environment Obeject into stored object."/>
    </flow>
    <flow name="fetch-all-applications-flow" initialState="started">
        <logger message="Getting All Applications -------------------------------------------&gt;&gt;&gt;&gt;&gt;" level="INFO" doc:name="Logger"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store"/>
        <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="all_environments_object" doc:name="Retrieve all_environments_object From Object Store"/>
        <set-payload value="#[payload.data]" mimeType="application/java" doc:name="Set Payload"/>
        <batch:execute name="for-each-environment-Batch" doc:name="for-each-environment-Batch"/>
    </flow>
    <batch:job name="for-each-environment-Batch">
        <batch:process-records>
            <batch:step name="for-each-environment-Batch_Step">
                <logger message="for-each-environment-Batch #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
                <batch:set-record-variable variableName="environment" value="#[payload]" doc:name="Backup Environment Record Variable"/>
                <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store"/>
                <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header"/>
                <set-property propertyName="X-ANYPNT-ENV-ID" value="#[payload.id]" doc:name="Set X-ANYPNT-ENV-ID Header"/>
                <logger message="Before HTTP Record Var Environment ---------------&gt; #[recordVars.environment]" level="INFO" doc:name="Logger"/>
                <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/cloudhub/api/v2/applications" method="GET" doc:name="HTTP"/>
                <logger message="Record Var Environment ---------------&gt; #[recordVars.environment]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
environment: recordVars.environment,
application: $
}]]></dw:set-payload>
                </dw:transform-message>
                <json:json-to-object-transformer returnClass="java.lang.Object" mimeType="application/java" doc:name="JSON to Object"/>
                <batch:execute name="for-each-application-Batch" doc:name="for-each-application-Batch"/>
            </batch:step>
        </batch:process-records>
    </batch:job>
    <batch:job name="for-each-application-Batch">
        <batch:process-records>
            <batch:step name="for-each-application-Batch_Step">
                <logger message="for-each-application-Batch Domain:::: #[payload.application.domain] + Environment ::: #[payload.environment.name] " level="INFO" doc:name="Logger"/>
                <batch:set-record-variable variableName="application" value="#[payload]" doc:name="Back Up of Application record Variable"/>
                <set-property propertyName="X-ANYPNT-ENV-ID" value=" #[payload.environment.id]" doc:name="Set X-ANYPNT-ENV-ID Header"/>
                <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store"/>
                <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header"/>
                <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/cloudhub/api/v2/applications/#[recordVars.application.application.domain]/deployments" method="GET" doc:name="HTTP"/>
                <logger message="#[message.payloadAs(java.lang.String)]" level="ERROR" doc:name="Logger"/>
                <json:json-to-object-transformer returnClass="message.transformers.models.Records" mimeType="application/java" doc:name="JSON to Object"/>
                <custom-transformer class="message.transformers.RecordsTransFormer" doc:name="Java">
                    <spring:property name="allowedAppInstancesWithStatus" value="${allowedAppInstancesWithStatus}"/>
                </custom-transformer>
                <logger level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	application: recordVars.application,
	instance: $ as :object {class: "message.transformers.models.Instance"}
}]]></dw:set-payload>
                </dw:transform-message>
                <batch:execute name="for-each-instance-Batch" doc:name="for-each-instance-Batch"/>
                <!-- <batch:execute name="for-each-instance-Batch" doc:name="for-each-instance-Batch"/> -->
            </batch:step>
        </batch:process-records>
    </batch:job>
    <batch:job name="for-each-instance-Batch">
        <batch:process-records>
            <batch:step name="for-each-instance-Batch_Step">
                <logger message="Environment :::  #[payload.application.environment.id] + Application :::: #[payload.application.application.domain] +Instance ::: #[payload.instance.instanceId]" level="INFO" doc:name="Logger"/>
                <batch:set-record-variable variableName="instance" value="#[payload]" doc:name="Back Up of Instance record Variable"/>
                <set-property propertyName="X-ANYPNT-ENV-ID" value="#[payload.application.environment.id]" doc:name="Set X-ANYPNT-ENV-ID Header"/>
                <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_organization_name" doc:name="Retrieve Organization From Object Store"/>
                <batch:set-record-variable variableName="anypoint_organization_name" value="#[message.payloadAs(java.lang.String)]" doc:name="Organization Name Record Var"/>
                <objectstore:retrieve config-ref="ObjectStore__Connector" key="anypoint_access_token" doc:name="Retrieve access Token From Object Store"/>
                <set-property propertyName="Authorization" value="Bearer #[message.payloadAs(java.lang.String)]" doc:name="Set Authorization Header"/>
                <http:request config-ref="HTTP_Request_Configuration_AnyPoint_Platfrom" path="/cloudhub/api/v2/applications/#[recordVars.instance.application.application.domain]/instances/#[recordVars.instance.instance.instanceId]/log-file" method="GET" doc:name="HTTP"/>
                <object-to-string-transformer returnClass="java.lang.String" doc:name="Object to String"/>
                <logger message="${locationToSaveLogs}\CLOUDHUB-generated-logs\#[recordVars.instance.application.environment.name]\#[recordVars.instance.application.application.domain]\#[recordVars.instance.instance.instanceId]\#[server.dateTime.format(&quot;HH-mm-DD-MM-YYYY&quot;)]-#[recordVars.instance.application.application.domain]-#[recordVars.instance.instance.region]-#[recordVars.instance.application.environment.name].log" level="INFO" doc:name="Logger"/>
                <flow-ref name="saving-cloudhub-log-files-Flow" doc:name="saving-cloudhub-log-files-Flow"/>
            </batch:step>
        </batch:process-records>
    </batch:job>
    <flow name="saving-cloudhub-log-files-Flow">
        <file:outbound-endpoint path="${locationToSaveLogs}\CLOUDHUB-generated-logs\#[recordVars.anypoint_organization_name]\#[recordVars.instance.application.environment.name]\#[recordVars.instance.application.application.domain]\#[recordVars.instance.instance.status]\#[recordVars.instance.instance.instanceId]-#[recordVars.instance.instance.region]\" outputPattern="#[server.dateTime.format(&quot;HH-mm-ss-dd-MMMM-YYYY&quot;)]-#[recordVars.instance.application.application.domain]-#[recordVars.instance.instance.region]-#[recordVars.instance.application.environment.name].logs" connector-ref="File" responseTimeout="10000" doc:name="Write Logs To a File in Local File System"/>
    </flow>
  <!--   <batch:job name="for-each-worker-Batch">
        <batch:process-records>
            <batch:step name="Batch_Step2"/>
        </batch:process-records>
    </batch:job> -->
</mule>
